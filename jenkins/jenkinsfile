pipeline {
    agent {
        label 'devops' 
    }
    parameters {
        string(name: 'ImageName' , defaultValue: 'jenkinsapp')
        string(name: 'ImageTag' , defaultValue: 'latest')
        string(name: 'ContainerPort' , defaultValue: '8094')
        string(name: 'ContainerName' , defaultValue: 'jenkinsapp2')
    }
    environment { 
        DOCKER_REGISTRY_CREDS =  credentials('docker-registry-login')
    }
    stages {
        stage('App Code Checkout') {
          steps {
            git url: 'https://github.com/ZatakiyaPal/Jenkins-Project.git' , branch: 'main'
          }
        }

        stage('Build Image') {
            steps {
                sh "docker build -t ${params.ImageName}:${params.ImageTag} ."
            }
        }    
        stage('Container create'){
            steps {
                sh "docker run -dit --name ${params.ContainerName} -p ${params.ContainerPort} ${params.ImageName}:${params.ImageTag}"
            }
        }
         stage('Push To Registry'){
            steps {
                sh "docker login -u $DOCKER_REGISTRY_CREDS_USR -p $DOCKER_REGISTRY_CREDS_PSW "
                sh "docker tag ${params.ImageName}:${params.ImageTag}  $DOCKER_REGISTRY_CREDS_USR/${params.ImageName}:${params.ImageTag}"
                sh " docker push $DOCKER_REGISTRY_CREDS_USR/${params.ImageName}:${params.ImageTag} "
                sh " docker rm -f ${params.ImageName}:${params.ImageTag} "
                sh "docker rm -f $DOCKER_REGISTRY_CREDS_USR/${params.ImageName}:${params.ImageTag} "
            }
        }
        stage('container create'){
            steps{
                sh "docker rm -f ${params.ContainerName}"
                sh "docker run -dit --name ${params.ContainerName} -p ${params.ContainerPort}:80 $DOCKER_REGISTRY_CREDS_USR/${params:ImageName}:${params.ImageTag}"
            }
        }
    }
}